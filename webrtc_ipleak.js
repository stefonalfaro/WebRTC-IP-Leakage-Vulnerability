let ipAddresses = [];

// Function to handle found IP address and display it in the HTML body
function handleIP(ip) {
  ipAddresses.push(ip);

  const ipList = document.getElementById('ip-list');
  const listItem = document.createElement('li');
  listItem.textContent = ip;
  ipList.appendChild(listItem);
}

// Create an RTCPeerConnection with an empty configuration
const peerConnection = new RTCPeerConnection({
  iceServers: []
});

// Listen for candidate events
peerConnection.onicecandidate = function(event) {
  if (event.candidate) {
    const parts = event.candidate.candidate.split(' ');
    const ip = parts[4];
    const type = parts[7];
    if (type === 'srflx' || type === 'host') {
      handleIP(ip);
    }
  }
};

// Listen for ice gathering state changes
peerConnection.onicegatheringstatechange = function() {
  if (peerConnection.iceGatheringState === 'complete') {
    // All IPs have been gathered
  }
};

// Create an empty data channel to trigger events
peerConnection.createDataChannel("");

// Create an offer to force candidate gathering to start
peerConnection.createOffer()
  .then(offer => peerConnection.setLocalDescription(offer))
  .catch(error => console.error(error));
